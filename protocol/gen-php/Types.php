<?php
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Registration {
  static $_TSPEC;

  /**
   * @var string
   */
  public $uuId = null;
  /**
   * @var double
   */
  public $timestamp = null;
  /**
   * @var string
   */
  public $platformId = null;
  /**
   * @var string
   */
  public $systemVersion = null;
  /**
   * @var string
   */
  public $systemDistribution = null;
  /**
   * @var string
   */
  public $kernelVersion = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uuId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'platformId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'systemVersion',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'systemDistribution',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'kernelVersion',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uuId'])) {
        $this->uuId = $vals['uuId'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['platformId'])) {
        $this->platformId = $vals['platformId'];
      }
      if (isset($vals['systemVersion'])) {
        $this->systemVersion = $vals['systemVersion'];
      }
      if (isset($vals['systemDistribution'])) {
        $this->systemDistribution = $vals['systemDistribution'];
      }
      if (isset($vals['kernelVersion'])) {
        $this->kernelVersion = $vals['kernelVersion'];
      }
    }
  }

  public function getName() {
    return 'Registration';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platformId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemDistribution);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->kernelVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Registration');
    if ($this->uuId !== null) {
      $xfer += $output->writeFieldBegin('uuId', TType::STRING, 1);
      $xfer += $output->writeString($this->uuId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platformId !== null) {
      $xfer += $output->writeFieldBegin('platformId', TType::STRING, 3);
      $xfer += $output->writeString($this->platformId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemVersion !== null) {
      $xfer += $output->writeFieldBegin('systemVersion', TType::STRING, 4);
      $xfer += $output->writeString($this->systemVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemDistribution !== null) {
      $xfer += $output->writeFieldBegin('systemDistribution', TType::STRING, 5);
      $xfer += $output->writeString($this->systemDistribution);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kernelVersion !== null) {
      $xfer += $output->writeFieldBegin('kernelVersion', TType::STRING, 6);
      $xfer += $output->writeString($this->kernelVersion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProcessInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $pId = null;
  /**
   * @var string
   */
  public $pName = null;
  /**
   * @var string
   */
  public $applicationLabel = null;
  /**
   * @var bool
   */
  public $isSystemApp = null;
  /**
   * @var string
   */
  public $importance = null;
  /**
   * @var string
   */
  public $versionName = null;
  /**
   * @var int
   */
  public $versionCode = null;
  /**
   * @var string[]
   */
  public $appSignatures = null;
  /**
   * @var string
   */
  public $installationPkg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'applicationLabel',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'isSystemApp',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'importance',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'versionName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'versionCode',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'appSignatures',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'installationPkg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pId'])) {
        $this->pId = $vals['pId'];
      }
      if (isset($vals['pName'])) {
        $this->pName = $vals['pName'];
      }
      if (isset($vals['applicationLabel'])) {
        $this->applicationLabel = $vals['applicationLabel'];
      }
      if (isset($vals['isSystemApp'])) {
        $this->isSystemApp = $vals['isSystemApp'];
      }
      if (isset($vals['importance'])) {
        $this->importance = $vals['importance'];
      }
      if (isset($vals['versionName'])) {
        $this->versionName = $vals['versionName'];
      }
      if (isset($vals['versionCode'])) {
        $this->versionCode = $vals['versionCode'];
      }
      if (isset($vals['appSignatures'])) {
        $this->appSignatures = $vals['appSignatures'];
      }
      if (isset($vals['installationPkg'])) {
        $this->installationPkg = $vals['installationPkg'];
      }
    }
  }

  public function getName() {
    return 'ProcessInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationLabel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSystemApp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->importance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->versionName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->versionCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->appSignatures = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->appSignatures []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->installationPkg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProcessInfo');
    if ($this->pId !== null) {
      $xfer += $output->writeFieldBegin('pId', TType::I32, 1);
      $xfer += $output->writeI32($this->pId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pName !== null) {
      $xfer += $output->writeFieldBegin('pName', TType::STRING, 2);
      $xfer += $output->writeString($this->pName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationLabel !== null) {
      $xfer += $output->writeFieldBegin('applicationLabel', TType::STRING, 3);
      $xfer += $output->writeString($this->applicationLabel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSystemApp !== null) {
      $xfer += $output->writeFieldBegin('isSystemApp', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isSystemApp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importance !== null) {
      $xfer += $output->writeFieldBegin('importance', TType::STRING, 5);
      $xfer += $output->writeString($this->importance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->versionName !== null) {
      $xfer += $output->writeFieldBegin('versionName', TType::STRING, 6);
      $xfer += $output->writeString($this->versionName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->versionCode !== null) {
      $xfer += $output->writeFieldBegin('versionCode', TType::I32, 7);
      $xfer += $output->writeI32($this->versionCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appSignatures !== null) {
      if (!is_array($this->appSignatures)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('appSignatures', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRING, count($this->appSignatures));
        {
          foreach ($this->appSignatures as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->installationPkg !== null) {
      $xfer += $output->writeFieldBegin('installationPkg', TType::STRING, 9);
      $xfer += $output->writeString($this->installationPkg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NetworkDetails {
  static $_TSPEC;

  /**
   * @var string
   */
  public $networkType = null;
  /**
   * @var string
   */
  public $mobileNetworkType = null;
  /**
   * @var string
   */
  public $mobileDataStatus = null;
  /**
   * @var string
   */
  public $mobileDataActivity = null;
  /**
   * @var bool
   */
  public $roamingEnabled = null;
  /**
   * @var string
   */
  public $wifiStatus = null;
  /**
   * @var int
   */
  public $wifiSignalStrength = null;
  /**
   * @var int
   */
  public $wifiLinkSpeed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'networkType',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mobileNetworkType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mobileDataStatus',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mobileDataActivity',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'roamingEnabled',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'wifiStatus',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'wifiSignalStrength',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'wifiLinkSpeed',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['networkType'])) {
        $this->networkType = $vals['networkType'];
      }
      if (isset($vals['mobileNetworkType'])) {
        $this->mobileNetworkType = $vals['mobileNetworkType'];
      }
      if (isset($vals['mobileDataStatus'])) {
        $this->mobileDataStatus = $vals['mobileDataStatus'];
      }
      if (isset($vals['mobileDataActivity'])) {
        $this->mobileDataActivity = $vals['mobileDataActivity'];
      }
      if (isset($vals['roamingEnabled'])) {
        $this->roamingEnabled = $vals['roamingEnabled'];
      }
      if (isset($vals['wifiStatus'])) {
        $this->wifiStatus = $vals['wifiStatus'];
      }
      if (isset($vals['wifiSignalStrength'])) {
        $this->wifiSignalStrength = $vals['wifiSignalStrength'];
      }
      if (isset($vals['wifiLinkSpeed'])) {
        $this->wifiLinkSpeed = $vals['wifiLinkSpeed'];
      }
    }
  }

  public function getName() {
    return 'NetworkDetails';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->networkType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobileNetworkType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobileDataStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobileDataActivity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->roamingEnabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wifiStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wifiSignalStrength);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wifiLinkSpeed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NetworkDetails');
    if ($this->networkType !== null) {
      $xfer += $output->writeFieldBegin('networkType', TType::STRING, 1);
      $xfer += $output->writeString($this->networkType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobileNetworkType !== null) {
      $xfer += $output->writeFieldBegin('mobileNetworkType', TType::STRING, 2);
      $xfer += $output->writeString($this->mobileNetworkType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobileDataStatus !== null) {
      $xfer += $output->writeFieldBegin('mobileDataStatus', TType::STRING, 3);
      $xfer += $output->writeString($this->mobileDataStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobileDataActivity !== null) {
      $xfer += $output->writeFieldBegin('mobileDataActivity', TType::STRING, 4);
      $xfer += $output->writeString($this->mobileDataActivity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roamingEnabled !== null) {
      $xfer += $output->writeFieldBegin('roamingEnabled', TType::BOOL, 5);
      $xfer += $output->writeBool($this->roamingEnabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wifiStatus !== null) {
      $xfer += $output->writeFieldBegin('wifiStatus', TType::STRING, 6);
      $xfer += $output->writeString($this->wifiStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wifiSignalStrength !== null) {
      $xfer += $output->writeFieldBegin('wifiSignalStrength', TType::I32, 7);
      $xfer += $output->writeI32($this->wifiSignalStrength);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wifiLinkSpeed !== null) {
      $xfer += $output->writeFieldBegin('wifiLinkSpeed', TType::I32, 8);
      $xfer += $output->writeI32($this->wifiLinkSpeed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatteryDetails {
  static $_TSPEC;

  /**
   * @var string
   */
  public $batteryCharger = null;
  /**
   * @var string
   */
  public $batteryHealth = null;
  /**
   * @var double
   */
  public $batteryVoltage = null;
  /**
   * @var double
   */
  public $batteryTemperature = null;
  /**
   * @var string
   */
  public $batteryTechnology = null;
  /**
   * @var double
   */
  public $batteryCapacity = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batteryCharger',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'batteryHealth',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'batteryVoltage',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'batteryTemperature',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'batteryTechnology',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'batteryCapacity',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['batteryCharger'])) {
        $this->batteryCharger = $vals['batteryCharger'];
      }
      if (isset($vals['batteryHealth'])) {
        $this->batteryHealth = $vals['batteryHealth'];
      }
      if (isset($vals['batteryVoltage'])) {
        $this->batteryVoltage = $vals['batteryVoltage'];
      }
      if (isset($vals['batteryTemperature'])) {
        $this->batteryTemperature = $vals['batteryTemperature'];
      }
      if (isset($vals['batteryTechnology'])) {
        $this->batteryTechnology = $vals['batteryTechnology'];
      }
      if (isset($vals['batteryCapacity'])) {
        $this->batteryCapacity = $vals['batteryCapacity'];
      }
    }
  }

  public function getName() {
    return 'BatteryDetails';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batteryCharger);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batteryHealth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->batteryVoltage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->batteryTemperature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batteryTechnology);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->batteryCapacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatteryDetails');
    if ($this->batteryCharger !== null) {
      $xfer += $output->writeFieldBegin('batteryCharger', TType::STRING, 1);
      $xfer += $output->writeString($this->batteryCharger);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batteryHealth !== null) {
      $xfer += $output->writeFieldBegin('batteryHealth', TType::STRING, 2);
      $xfer += $output->writeString($this->batteryHealth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batteryVoltage !== null) {
      $xfer += $output->writeFieldBegin('batteryVoltage', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->batteryVoltage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batteryTemperature !== null) {
      $xfer += $output->writeFieldBegin('batteryTemperature', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->batteryTemperature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batteryTechnology !== null) {
      $xfer += $output->writeFieldBegin('batteryTechnology', TType::STRING, 5);
      $xfer += $output->writeString($this->batteryTechnology);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batteryCapacity !== null) {
      $xfer += $output->writeFieldBegin('batteryCapacity', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->batteryCapacity);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CpuStatus {
  static $_TSPEC;

  /**
   * @var double
   */
  public $cpuUsage = null;
  /**
   * @var double
   */
  public $uptime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cpuUsage',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'uptime',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cpuUsage'])) {
        $this->cpuUsage = $vals['cpuUsage'];
      }
      if (isset($vals['uptime'])) {
        $this->uptime = $vals['uptime'];
      }
    }
  }

  public function getName() {
    return 'CpuStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpuUsage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->uptime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CpuStatus');
    if ($this->cpuUsage !== null) {
      $xfer += $output->writeFieldBegin('cpuUsage', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->cpuUsage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uptime !== null) {
      $xfer += $output->writeFieldBegin('uptime', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->uptime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CallInfo {
  static $_TSPEC;

  /**
   * @var double
   */
  public $incomingCallTime = null;
  /**
   * @var double
   */
  public $outgoingCallTime = null;
  /**
   * @var double
   */
  public $nonCallTime = null;
  /**
   * @var string
   */
  public $callStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'incomingCallTime',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'outgoingCallTime',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'nonCallTime',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'callStatus',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['incomingCallTime'])) {
        $this->incomingCallTime = $vals['incomingCallTime'];
      }
      if (isset($vals['outgoingCallTime'])) {
        $this->outgoingCallTime = $vals['outgoingCallTime'];
      }
      if (isset($vals['nonCallTime'])) {
        $this->nonCallTime = $vals['nonCallTime'];
      }
      if (isset($vals['callStatus'])) {
        $this->callStatus = $vals['callStatus'];
      }
    }
  }

  public function getName() {
    return 'CallInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->incomingCallTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->outgoingCallTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->nonCallTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->callStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CallInfo');
    if ($this->incomingCallTime !== null) {
      $xfer += $output->writeFieldBegin('incomingCallTime', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->incomingCallTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->outgoingCallTime !== null) {
      $xfer += $output->writeFieldBegin('outgoingCallTime', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->outgoingCallTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nonCallTime !== null) {
      $xfer += $output->writeFieldBegin('nonCallTime', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->nonCallTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callStatus !== null) {
      $xfer += $output->writeFieldBegin('callStatus', TType::STRING, 4);
      $xfer += $output->writeString($this->callStatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Feature {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'Feature';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Feature');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Sample {
  static $_TSPEC;

  /**
   * @var string
   */
  public $uuId = null;
  /**
   * @var double
   */
  public $timestamp = null;
  /**
   * @var \ProcessInfo[]
   */
  public $piList = null;
  /**
   * @var string
   */
  public $batteryState = null;
  /**
   * @var double
   */
  public $batteryLevel = null;
  /**
   * @var int
   */
  public $memoryWired = null;
  /**
   * @var int
   */
  public $memoryActive = null;
  /**
   * @var int
   */
  public $memoryInactive = null;
  /**
   * @var int
   */
  public $memoryFree = null;
  /**
   * @var int
   */
  public $memoryUser = null;
  /**
   * @var string
   */
  public $triggeredBy = null;
  /**
   * @var string
   */
  public $networkStatus = null;
  /**
   * @var double
   */
  public $distanceTraveled = null;
  /**
   * @var int
   */
  public $screenBrightness = null;
  /**
   * @var \NetworkDetails
   */
  public $networkDetails = null;
  /**
   * @var \BatteryDetails
   */
  public $batteryDetails = null;
  /**
   * @var \CpuStatus
   */
  public $cpuStatus = null;
  /**
   * @var string[]
   */
  public $locationProviders = null;
  /**
   * @var \CallInfo
   */
  public $callInfo = null;
  /**
   * @var int
   */
  public $screenOn = null;
  /**
   * @var string
   */
  public $timeZone = null;
  /**
   * @var int
   */
  public $unknownSources = null;
  /**
   * @var int
   */
  public $developerMode = null;
  /**
   * @var \Feature[]
   */
  public $extra = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uuId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'piList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ProcessInfo',
            ),
          ),
        4 => array(
          'var' => 'batteryState',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'batteryLevel',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'memoryWired',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'memoryActive',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'memoryInactive',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'memoryFree',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'memoryUser',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'triggeredBy',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'networkStatus',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'distanceTraveled',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'screenBrightness',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'networkDetails',
          'type' => TType::STRUCT,
          'class' => '\NetworkDetails',
          ),
        16 => array(
          'var' => 'batteryDetails',
          'type' => TType::STRUCT,
          'class' => '\BatteryDetails',
          ),
        17 => array(
          'var' => 'cpuStatus',
          'type' => TType::STRUCT,
          'class' => '\CpuStatus',
          ),
        18 => array(
          'var' => 'locationProviders',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        19 => array(
          'var' => 'callInfo',
          'type' => TType::STRUCT,
          'class' => '\CallInfo',
          ),
        20 => array(
          'var' => 'screenOn',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'timeZone',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'unknownSources',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'developerMode',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'extra',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Feature',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uuId'])) {
        $this->uuId = $vals['uuId'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['piList'])) {
        $this->piList = $vals['piList'];
      }
      if (isset($vals['batteryState'])) {
        $this->batteryState = $vals['batteryState'];
      }
      if (isset($vals['batteryLevel'])) {
        $this->batteryLevel = $vals['batteryLevel'];
      }
      if (isset($vals['memoryWired'])) {
        $this->memoryWired = $vals['memoryWired'];
      }
      if (isset($vals['memoryActive'])) {
        $this->memoryActive = $vals['memoryActive'];
      }
      if (isset($vals['memoryInactive'])) {
        $this->memoryInactive = $vals['memoryInactive'];
      }
      if (isset($vals['memoryFree'])) {
        $this->memoryFree = $vals['memoryFree'];
      }
      if (isset($vals['memoryUser'])) {
        $this->memoryUser = $vals['memoryUser'];
      }
      if (isset($vals['triggeredBy'])) {
        $this->triggeredBy = $vals['triggeredBy'];
      }
      if (isset($vals['networkStatus'])) {
        $this->networkStatus = $vals['networkStatus'];
      }
      if (isset($vals['distanceTraveled'])) {
        $this->distanceTraveled = $vals['distanceTraveled'];
      }
      if (isset($vals['screenBrightness'])) {
        $this->screenBrightness = $vals['screenBrightness'];
      }
      if (isset($vals['networkDetails'])) {
        $this->networkDetails = $vals['networkDetails'];
      }
      if (isset($vals['batteryDetails'])) {
        $this->batteryDetails = $vals['batteryDetails'];
      }
      if (isset($vals['cpuStatus'])) {
        $this->cpuStatus = $vals['cpuStatus'];
      }
      if (isset($vals['locationProviders'])) {
        $this->locationProviders = $vals['locationProviders'];
      }
      if (isset($vals['callInfo'])) {
        $this->callInfo = $vals['callInfo'];
      }
      if (isset($vals['screenOn'])) {
        $this->screenOn = $vals['screenOn'];
      }
      if (isset($vals['timeZone'])) {
        $this->timeZone = $vals['timeZone'];
      }
      if (isset($vals['unknownSources'])) {
        $this->unknownSources = $vals['unknownSources'];
      }
      if (isset($vals['developerMode'])) {
        $this->developerMode = $vals['developerMode'];
      }
      if (isset($vals['extra'])) {
        $this->extra = $vals['extra'];
      }
    }
  }

  public function getName() {
    return 'Sample';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->piList = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \ProcessInfo();
              $xfer += $elem12->read($input);
              $this->piList []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->batteryState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->batteryLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memoryWired);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memoryActive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memoryInactive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memoryFree);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->memoryUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->triggeredBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->networkStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->distanceTraveled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->screenBrightness);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRUCT) {
            $this->networkDetails = new \NetworkDetails();
            $xfer += $this->networkDetails->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRUCT) {
            $this->batteryDetails = new \BatteryDetails();
            $xfer += $this->batteryDetails->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRUCT) {
            $this->cpuStatus = new \CpuStatus();
            $xfer += $this->cpuStatus->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::LST) {
            $this->locationProviders = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $xfer += $input->readString($elem18);
              $this->locationProviders []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRUCT) {
            $this->callInfo = new \CallInfo();
            $xfer += $this->callInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->screenOn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timeZone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unknownSources);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->developerMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::LST) {
            $this->extra = array();
            $_size19 = 0;
            $_etype22 = 0;
            $xfer += $input->readListBegin($_etype22, $_size19);
            for ($_i23 = 0; $_i23 < $_size19; ++$_i23)
            {
              $elem24 = null;
              $elem24 = new \Feature();
              $xfer += $elem24->read($input);
              $this->extra []= $elem24;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Sample');
    if ($this->uuId !== null) {
      $xfer += $output->writeFieldBegin('uuId', TType::STRING, 1);
      $xfer += $output->writeString($this->uuId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->piList !== null) {
      if (!is_array($this->piList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('piList', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->piList));
        {
          foreach ($this->piList as $iter25)
          {
            $xfer += $iter25->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batteryState !== null) {
      $xfer += $output->writeFieldBegin('batteryState', TType::STRING, 4);
      $xfer += $output->writeString($this->batteryState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batteryLevel !== null) {
      $xfer += $output->writeFieldBegin('batteryLevel', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->batteryLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memoryWired !== null) {
      $xfer += $output->writeFieldBegin('memoryWired', TType::I32, 6);
      $xfer += $output->writeI32($this->memoryWired);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memoryActive !== null) {
      $xfer += $output->writeFieldBegin('memoryActive', TType::I32, 7);
      $xfer += $output->writeI32($this->memoryActive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memoryInactive !== null) {
      $xfer += $output->writeFieldBegin('memoryInactive', TType::I32, 8);
      $xfer += $output->writeI32($this->memoryInactive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memoryFree !== null) {
      $xfer += $output->writeFieldBegin('memoryFree', TType::I32, 9);
      $xfer += $output->writeI32($this->memoryFree);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->memoryUser !== null) {
      $xfer += $output->writeFieldBegin('memoryUser', TType::I32, 10);
      $xfer += $output->writeI32($this->memoryUser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->triggeredBy !== null) {
      $xfer += $output->writeFieldBegin('triggeredBy', TType::STRING, 11);
      $xfer += $output->writeString($this->triggeredBy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->networkStatus !== null) {
      $xfer += $output->writeFieldBegin('networkStatus', TType::STRING, 12);
      $xfer += $output->writeString($this->networkStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->distanceTraveled !== null) {
      $xfer += $output->writeFieldBegin('distanceTraveled', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->distanceTraveled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->screenBrightness !== null) {
      $xfer += $output->writeFieldBegin('screenBrightness', TType::I32, 14);
      $xfer += $output->writeI32($this->screenBrightness);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->networkDetails !== null) {
      if (!is_object($this->networkDetails)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('networkDetails', TType::STRUCT, 15);
      $xfer += $this->networkDetails->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batteryDetails !== null) {
      if (!is_object($this->batteryDetails)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('batteryDetails', TType::STRUCT, 16);
      $xfer += $this->batteryDetails->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpuStatus !== null) {
      if (!is_object($this->cpuStatus)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cpuStatus', TType::STRUCT, 17);
      $xfer += $this->cpuStatus->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->locationProviders !== null) {
      if (!is_array($this->locationProviders)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('locationProviders', TType::LST, 18);
      {
        $output->writeListBegin(TType::STRING, count($this->locationProviders));
        {
          foreach ($this->locationProviders as $iter26)
          {
            $xfer += $output->writeString($iter26);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callInfo !== null) {
      if (!is_object($this->callInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('callInfo', TType::STRUCT, 19);
      $xfer += $this->callInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->screenOn !== null) {
      $xfer += $output->writeFieldBegin('screenOn', TType::I32, 20);
      $xfer += $output->writeI32($this->screenOn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeZone !== null) {
      $xfer += $output->writeFieldBegin('timeZone', TType::STRING, 21);
      $xfer += $output->writeString($this->timeZone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unknownSources !== null) {
      $xfer += $output->writeFieldBegin('unknownSources', TType::I32, 22);
      $xfer += $output->writeI32($this->unknownSources);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->developerMode !== null) {
      $xfer += $output->writeFieldBegin('developerMode', TType::I32, 23);
      $xfer += $output->writeI32($this->developerMode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extra !== null) {
      if (!is_array($this->extra)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extra', TType::LST, 24);
      {
        $output->writeListBegin(TType::STRUCT, count($this->extra));
        {
          foreach ($this->extra as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DetailScreenReport {
  static $_TSPEC;

  /**
   * @var double
   */
  public $score = null;
  /**
   * @var double[]
   */
  public $xVals = null;
  /**
   * @var double[]
   */
  public $yVals = null;
  /**
   * @var double
   */
  public $expectedValue = null;
  /**
   * @var double
   */
  public $error = null;
  /**
   * @var double
   */
  public $errorWithout = null;
  /**
   * @var double
   */
  public $samples = null;
  /**
   * @var double
   */
  public $samplesWithout = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'score',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'xVals',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        3 => array(
          'var' => 'yVals',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        4 => array(
          'var' => 'expectedValue',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'error',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'errorWithout',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'samples',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'samplesWithout',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['xVals'])) {
        $this->xVals = $vals['xVals'];
      }
      if (isset($vals['yVals'])) {
        $this->yVals = $vals['yVals'];
      }
      if (isset($vals['expectedValue'])) {
        $this->expectedValue = $vals['expectedValue'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['errorWithout'])) {
        $this->errorWithout = $vals['errorWithout'];
      }
      if (isset($vals['samples'])) {
        $this->samples = $vals['samples'];
      }
      if (isset($vals['samplesWithout'])) {
        $this->samplesWithout = $vals['samplesWithout'];
      }
    }
  }

  public function getName() {
    return 'DetailScreenReport';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->xVals = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $xfer += $input->readDouble($elem33);
              $this->xVals []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->yVals = array();
            $_size34 = 0;
            $_etype37 = 0;
            $xfer += $input->readListBegin($_etype37, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $elem39 = null;
              $xfer += $input->readDouble($elem39);
              $this->yVals []= $elem39;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->expectedValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->errorWithout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->samples);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->samplesWithout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DetailScreenReport');
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->xVals !== null) {
      if (!is_array($this->xVals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('xVals', TType::LST, 2);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->xVals));
        {
          foreach ($this->xVals as $iter40)
          {
            $xfer += $output->writeDouble($iter40);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yVals !== null) {
      if (!is_array($this->yVals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('yVals', TType::LST, 3);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->yVals));
        {
          foreach ($this->yVals as $iter41)
          {
            $xfer += $output->writeDouble($iter41);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expectedValue !== null) {
      $xfer += $output->writeFieldBegin('expectedValue', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->expectedValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorWithout !== null) {
      $xfer += $output->writeFieldBegin('errorWithout', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->errorWithout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->samples !== null) {
      $xfer += $output->writeFieldBegin('samples', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->samples);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->samplesWithout !== null) {
      $xfer += $output->writeFieldBegin('samplesWithout', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->samplesWithout);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Reports {
  static $_TSPEC;

  /**
   * @var double
   */
  public $jScore = null;
  /**
   * @var \DetailScreenReport
   */
  public $os = null;
  /**
   * @var \DetailScreenReport
   */
  public $osWithout = null;
  /**
   * @var \DetailScreenReport
   */
  public $model = null;
  /**
   * @var \DetailScreenReport
   */
  public $modelWithout = null;
  /**
   * @var \DetailScreenReport
   */
  public $similarApps = null;
  /**
   * @var \DetailScreenReport
   */
  public $similarAppsWithout = null;
  /**
   * @var double
   */
  public $changeSinceLastWeek = null;
  /**
   * @var double
   */
  public $changeSinceLastWeekPercentage = null;
  /**
   * @var \DetailScreenReport
   */
  public $jScoreWith = null;
  /**
   * @var \DetailScreenReport
   */
  public $jScoreWithout = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jScore',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'os',
          'type' => TType::STRUCT,
          'class' => '\DetailScreenReport',
          ),
        3 => array(
          'var' => 'osWithout',
          'type' => TType::STRUCT,
          'class' => '\DetailScreenReport',
          ),
        4 => array(
          'var' => 'model',
          'type' => TType::STRUCT,
          'class' => '\DetailScreenReport',
          ),
        5 => array(
          'var' => 'modelWithout',
          'type' => TType::STRUCT,
          'class' => '\DetailScreenReport',
          ),
        6 => array(
          'var' => 'similarApps',
          'type' => TType::STRUCT,
          'class' => '\DetailScreenReport',
          ),
        7 => array(
          'var' => 'similarAppsWithout',
          'type' => TType::STRUCT,
          'class' => '\DetailScreenReport',
          ),
        8 => array(
          'var' => 'changeSinceLastWeek',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'changeSinceLastWeekPercentage',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'jScoreWith',
          'type' => TType::STRUCT,
          'class' => '\DetailScreenReport',
          ),
        11 => array(
          'var' => 'jScoreWithout',
          'type' => TType::STRUCT,
          'class' => '\DetailScreenReport',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jScore'])) {
        $this->jScore = $vals['jScore'];
      }
      if (isset($vals['os'])) {
        $this->os = $vals['os'];
      }
      if (isset($vals['osWithout'])) {
        $this->osWithout = $vals['osWithout'];
      }
      if (isset($vals['model'])) {
        $this->model = $vals['model'];
      }
      if (isset($vals['modelWithout'])) {
        $this->modelWithout = $vals['modelWithout'];
      }
      if (isset($vals['similarApps'])) {
        $this->similarApps = $vals['similarApps'];
      }
      if (isset($vals['similarAppsWithout'])) {
        $this->similarAppsWithout = $vals['similarAppsWithout'];
      }
      if (isset($vals['changeSinceLastWeek'])) {
        $this->changeSinceLastWeek = $vals['changeSinceLastWeek'];
      }
      if (isset($vals['changeSinceLastWeekPercentage'])) {
        $this->changeSinceLastWeekPercentage = $vals['changeSinceLastWeekPercentage'];
      }
      if (isset($vals['jScoreWith'])) {
        $this->jScoreWith = $vals['jScoreWith'];
      }
      if (isset($vals['jScoreWithout'])) {
        $this->jScoreWithout = $vals['jScoreWithout'];
      }
    }
  }

  public function getName() {
    return 'Reports';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->jScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->os = new \DetailScreenReport();
            $xfer += $this->os->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->osWithout = new \DetailScreenReport();
            $xfer += $this->osWithout->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->model = new \DetailScreenReport();
            $xfer += $this->model->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->modelWithout = new \DetailScreenReport();
            $xfer += $this->modelWithout->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->similarApps = new \DetailScreenReport();
            $xfer += $this->similarApps->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->similarAppsWithout = new \DetailScreenReport();
            $xfer += $this->similarAppsWithout->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->changeSinceLastWeek);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->changeSinceLastWeekPercentage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->jScoreWith = new \DetailScreenReport();
            $xfer += $this->jScoreWith->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->jScoreWithout = new \DetailScreenReport();
            $xfer += $this->jScoreWithout->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Reports');
    if ($this->jScore !== null) {
      $xfer += $output->writeFieldBegin('jScore', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->jScore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->os !== null) {
      if (!is_object($this->os)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('os', TType::STRUCT, 2);
      $xfer += $this->os->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->osWithout !== null) {
      if (!is_object($this->osWithout)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('osWithout', TType::STRUCT, 3);
      $xfer += $this->osWithout->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->model !== null) {
      if (!is_object($this->model)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('model', TType::STRUCT, 4);
      $xfer += $this->model->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modelWithout !== null) {
      if (!is_object($this->modelWithout)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('modelWithout', TType::STRUCT, 5);
      $xfer += $this->modelWithout->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->similarApps !== null) {
      if (!is_object($this->similarApps)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('similarApps', TType::STRUCT, 6);
      $xfer += $this->similarApps->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->similarAppsWithout !== null) {
      if (!is_object($this->similarAppsWithout)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('similarAppsWithout', TType::STRUCT, 7);
      $xfer += $this->similarAppsWithout->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->changeSinceLastWeek !== null) {
      $xfer += $output->writeFieldBegin('changeSinceLastWeek', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->changeSinceLastWeek);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->changeSinceLastWeekPercentage !== null) {
      $xfer += $output->writeFieldBegin('changeSinceLastWeekPercentage', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->changeSinceLastWeekPercentage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jScoreWith !== null) {
      if (!is_object($this->jScoreWith)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jScoreWith', TType::STRUCT, 10);
      $xfer += $this->jScoreWith->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jScoreWithout !== null) {
      if (!is_object($this->jScoreWithout)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jScoreWithout', TType::STRUCT, 11);
      $xfer += $this->jScoreWithout->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HogsBugs {
  static $_TSPEC;

  /**
   * @var string
   */
  public $appName = null;
  /**
   * @var double
   */
  public $wDistance = null;
  /**
   * @var double[]
   */
  public $xVals = null;
  /**
   * @var double[]
   */
  public $yVals = null;
  /**
   * @var double[]
   */
  public $xValsWithout = null;
  /**
   * @var double[]
   */
  public $yValsWithout = null;
  /**
   * @var double
   */
  public $expectedValue = null;
  /**
   * @var double
   */
  public $expectedValueWithout = null;
  /**
   * @var double
   */
  public $error = null;
  /**
   * @var double
   */
  public $errorWithout = null;
  /**
   * @var double
   */
  public $samples = null;
  /**
   * @var double
   */
  public $samplesWithout = null;
  /**
   * @var string
   */
  public $appLabel = null;
  /**
   * @var string
   */
  public $appPriority = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'wDistance',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'xVals',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        4 => array(
          'var' => 'yVals',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        5 => array(
          'var' => 'xValsWithout',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        6 => array(
          'var' => 'yValsWithout',
          'type' => TType::LST,
          'etype' => TType::DOUBLE,
          'elem' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        7 => array(
          'var' => 'expectedValue',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'expectedValueWithout',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'error',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'errorWithout',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'samples',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'samplesWithout',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'appLabel',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'appPriority',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appName'])) {
        $this->appName = $vals['appName'];
      }
      if (isset($vals['wDistance'])) {
        $this->wDistance = $vals['wDistance'];
      }
      if (isset($vals['xVals'])) {
        $this->xVals = $vals['xVals'];
      }
      if (isset($vals['yVals'])) {
        $this->yVals = $vals['yVals'];
      }
      if (isset($vals['xValsWithout'])) {
        $this->xValsWithout = $vals['xValsWithout'];
      }
      if (isset($vals['yValsWithout'])) {
        $this->yValsWithout = $vals['yValsWithout'];
      }
      if (isset($vals['expectedValue'])) {
        $this->expectedValue = $vals['expectedValue'];
      }
      if (isset($vals['expectedValueWithout'])) {
        $this->expectedValueWithout = $vals['expectedValueWithout'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['errorWithout'])) {
        $this->errorWithout = $vals['errorWithout'];
      }
      if (isset($vals['samples'])) {
        $this->samples = $vals['samples'];
      }
      if (isset($vals['samplesWithout'])) {
        $this->samplesWithout = $vals['samplesWithout'];
      }
      if (isset($vals['appLabel'])) {
        $this->appLabel = $vals['appLabel'];
      }
      if (isset($vals['appPriority'])) {
        $this->appPriority = $vals['appPriority'];
      }
    }
  }

  public function getName() {
    return 'HogsBugs';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->wDistance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->xVals = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readDouble($elem47);
              $this->xVals []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->yVals = array();
            $_size48 = 0;
            $_etype51 = 0;
            $xfer += $input->readListBegin($_etype51, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $elem53 = null;
              $xfer += $input->readDouble($elem53);
              $this->yVals []= $elem53;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->xValsWithout = array();
            $_size54 = 0;
            $_etype57 = 0;
            $xfer += $input->readListBegin($_etype57, $_size54);
            for ($_i58 = 0; $_i58 < $_size54; ++$_i58)
            {
              $elem59 = null;
              $xfer += $input->readDouble($elem59);
              $this->xValsWithout []= $elem59;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->yValsWithout = array();
            $_size60 = 0;
            $_etype63 = 0;
            $xfer += $input->readListBegin($_etype63, $_size60);
            for ($_i64 = 0; $_i64 < $_size60; ++$_i64)
            {
              $elem65 = null;
              $xfer += $input->readDouble($elem65);
              $this->yValsWithout []= $elem65;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->expectedValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->expectedValueWithout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->error);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->errorWithout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->samples);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->samplesWithout);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appLabel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appPriority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HogsBugs');
    if ($this->appName !== null) {
      $xfer += $output->writeFieldBegin('appName', TType::STRING, 1);
      $xfer += $output->writeString($this->appName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wDistance !== null) {
      $xfer += $output->writeFieldBegin('wDistance', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->wDistance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->xVals !== null) {
      if (!is_array($this->xVals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('xVals', TType::LST, 3);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->xVals));
        {
          foreach ($this->xVals as $iter66)
          {
            $xfer += $output->writeDouble($iter66);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yVals !== null) {
      if (!is_array($this->yVals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('yVals', TType::LST, 4);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->yVals));
        {
          foreach ($this->yVals as $iter67)
          {
            $xfer += $output->writeDouble($iter67);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->xValsWithout !== null) {
      if (!is_array($this->xValsWithout)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('xValsWithout', TType::LST, 5);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->xValsWithout));
        {
          foreach ($this->xValsWithout as $iter68)
          {
            $xfer += $output->writeDouble($iter68);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yValsWithout !== null) {
      if (!is_array($this->yValsWithout)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('yValsWithout', TType::LST, 6);
      {
        $output->writeListBegin(TType::DOUBLE, count($this->yValsWithout));
        {
          foreach ($this->yValsWithout as $iter69)
          {
            $xfer += $output->writeDouble($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expectedValue !== null) {
      $xfer += $output->writeFieldBegin('expectedValue', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->expectedValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expectedValueWithout !== null) {
      $xfer += $output->writeFieldBegin('expectedValueWithout', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->expectedValueWithout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      $xfer += $output->writeFieldBegin('error', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->error);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorWithout !== null) {
      $xfer += $output->writeFieldBegin('errorWithout', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->errorWithout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->samples !== null) {
      $xfer += $output->writeFieldBegin('samples', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->samples);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->samplesWithout !== null) {
      $xfer += $output->writeFieldBegin('samplesWithout', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->samplesWithout);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appLabel !== null) {
      $xfer += $output->writeFieldBegin('appLabel', TType::STRING, 13);
      $xfer += $output->writeString($this->appLabel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appPriority !== null) {
      $xfer += $output->writeFieldBegin('appPriority', TType::STRING, 14);
      $xfer += $output->writeString($this->appPriority);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HogBugReport {
  static $_TSPEC;

  /**
   * @var string
   */
  public $uuId = null;
  /**
   * @var \HogsBugs[]
   */
  public $hbList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uuId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'hbList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\HogsBugs',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uuId'])) {
        $this->uuId = $vals['uuId'];
      }
      if (isset($vals['hbList'])) {
        $this->hbList = $vals['hbList'];
      }
    }
  }

  public function getName() {
    return 'HogBugReport';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->hbList = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new \HogsBugs();
              $xfer += $elem75->read($input);
              $this->hbList []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HogBugReport');
    if ($this->uuId !== null) {
      $xfer += $output->writeFieldBegin('uuId', TType::STRING, 1);
      $xfer += $output->writeString($this->uuId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hbList !== null) {
      if (!is_array($this->hbList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hbList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->hbList));
        {
          foreach ($this->hbList as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


